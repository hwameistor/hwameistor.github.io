"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9238],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(t),d=o,v=u["".concat(l,".").concat(d)]||u[d]||c[d]||i;return t?a.createElement(v,r(r({ref:n},m),{},{components:t})):a.createElement(v,r({ref:n},m))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8866:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const i={sidebar_position:11,sidebar_label:"Thin Provision Volumes"},r="Hwameistor Thin Provision User Guide",s={unversionedId:"volumes/volume_thin",id:"volumes/volume_thin",title:"Hwameistor Thin Provision User Guide",description:"1. Overview",source:"@site/docs/volumes/volume_thin.md",sourceDirName:"volumes",slug:"/volumes/volume_thin",permalink:"/docs/volumes/volume_thin",draft:!1,editUrl:"https://github.com/hwameistor/hwameistor/edit/main/docs/docs/volumes/volume_thin.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,sidebar_label:"Thin Provision Volumes"},sidebar:"tutorialSidebar",previous:{title:"Encrypt Volume",permalink:"/docs/volumes/volume_encrypt"},next:{title:"Fast Failover",permalink:"/docs/fast_failover"}},l={},p=[{value:"1. Overview",id:"1-overview",level:2},{value:"2. Use Cases",id:"2-use-cases",level:2},{value:"3. Quick Start",id:"3-quick-start",level:2},{value:"3.1 Create ThinPoolClaim",id:"31-create-thinpoolclaim",level:3},{value:"3.2 Create Thin StorageClass",id:"32-create-thin-storageclass",level:3},{value:"4. Usage Examples",id:"4-usage-examples",level:2},{value:"4.1 PVC Usage",id:"41-pvc-usage",level:3},{value:"4.2 Snapshot",id:"42-snapshot",level:3},{value:"4.3 Create PVC from Snapshot",id:"43-create-pvc-from-snapshot",level:3},{value:"4.4 Clone Operation",id:"44-clone-operation",level:3},{value:"5. Monitoring and Management",id:"5-monitoring-and-management",level:2},{value:"5.1 Check Thin Pool Status",id:"51-check-thin-pool-status",level:3},{value:"5.2 Expand Thin Pool",id:"52-expand-thin-pool",level:3},{value:"6. Important Notes",id:"6-important-notes",level:2},{value:"7. Troubleshooting",id:"7-troubleshooting",level:2}],m={toc:p};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"hwameistor-thin-provision-user-guide"},"Hwameistor Thin Provision User Guide"),(0,o.kt)("h2",{id:"1-overview"},"1. Overview"),(0,o.kt)("p",null,"Hwameistor now supports Thin Provision functionality, implemented based on LVM's thin provisioning feature. Compared to traditional thick provisioning, thin mode enables more efficient storage space utilization and supports rapid snapshot creation and cloning."),(0,o.kt)("h2",{id:"2-use-cases"},"2. Use Cases"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Recommended scenarios for thin provisioning:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Frequent snapshot or volume clone creation required"),(0,o.kt)("li",{parentName:"ul"},"Limited storage space needing over-provisioning"),(0,o.kt)("li",{parentName:"ul"},"Applications without extreme storage performance requirements"),(0,o.kt)("li",{parentName:"ul"},"Single-replica scenarios (current version doesn't support thin multi-replica)")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Not recommended scenarios:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Performance-critical applications (thin provisioning has some overhead)"),(0,o.kt)("li",{parentName:"ul"},"High-availability scenarios requiring multiple replicas (current version limitation)")),(0,o.kt)("h2",{id:"3-quick-start"},"3. Quick Start"),(0,o.kt)("h3",{id:"31-create-thinpoolclaim"},"3.1 Create ThinPoolClaim"),(0,o.kt)("p",null,"First create a ThinPoolClaim:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: hwameistor.io/v1alpha1\nkind: ThinPoolClaim\nmetadata:\n  name: example-thinpool\nspec:\n  nodeName: node1  # Specify node\n  description:\n    poolName: LocalStorage_PoolHDD  # Specify storage pool for thin pool creation. Options: LocalStorage_PoolHDD, LocalStorage_PoolSSD, LocalStorage_PoolNVMe\n    capacity: 100  # ThinPool capacity in GiB\n    overProvisionRatio: "1.0"  # Over-provisioning ratio, default and minimum is 1.0. Example: If ratio is "3.0" with 100GiB capacity, the pool can over-provision up to 300GiB\n    poolMetadataSize: 1  # Metadata pool size in GiB. Default 1G sufficient for most scenarios\n')),(0,o.kt)("h3",{id:"32-create-thin-storageclass"},"3.2 Create Thin StorageClass"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'allowVolumeExpansion: true\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: hwameistor-storage-lvm-thin-hdd\nparameters:\n  convertible: "false"\n  csi.storage.k8s.io/fstype: ext4\n  poolClass: HDD\n  poolType: REGULAR\n  # Currently only "1" is supported\n  replicaNumber: "1"\n  striped: "true"\n  # This is used to specify the SC to create thin PVC\n  thin: "true"\n  volumeKind: LVM\nprovisioner: lvm.hwameistor.io\nreclaimPolicy: Delete\nvolumeBindingMode: WaitForFirstConsumer\n')),(0,o.kt)("h2",{id:"4-usage-examples"},"4. Usage Examples"),(0,o.kt)("h3",{id:"41-pvc-usage"},"4.1 PVC Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: test-pvc\nspec:\n  volumeMode: Filesystem\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 3Gi\n  storageClassName: hwameistor-storage-lvm-thin-hdd\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test-pod\nspec:\n  containers:\n  - name: busybox\n    image: busybox:1.31.1\n    command:\n      - sleep\n      - "360000000"\n    imagePullPolicy: IfNotPresent\n    volumeMounts:\n    - name: temp-pvc\n      mountPath: /mnt/temp-fs\n  volumes:\n  - name: temp-pvc\n    persistentVolumeClaim:\n      claimName: test-pvc\n  terminationGracePeriodSeconds: 10\n')),(0,o.kt)("h3",{id:"42-snapshot"},"4.2 Snapshot"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: snapshot.storage.k8s.io/v1\nkind: VolumeSnapshot\nmetadata:\n  name: my-snapshot\nspec:\n  volumeSnapshotClassName: hwameistor-storage-lvm-snapshot\n  source:\n    persistentVolumeClaimName: test-pvc\n")),(0,o.kt)("h3",{id:"43-create-pvc-from-snapshot"},"4.3 Create PVC from Snapshot"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: test-pvc2\nspec:\n  volumeMode: Filesystem\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 3Gi\n  storageClassName: hwameistor-storage-lvm-thin-hdd\n  dataSource:\n    name: my-snapshot\n    kind: VolumeSnapshot\n    apiGroup: snapshot.storage.k8s.io\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test-pod2\nspec:\n  containers:\n  - name: busybox\n    image: busybox:1.31.1\n    command:\n      - sleep\n      - "360000000"\n    imagePullPolicy: IfNotPresent\n    volumeMounts:\n    - name: temp-pvc\n      mountPath: /mnt/temp-fs\n  volumes:\n  - name: temp-pvc\n    persistentVolumeClaim:\n      claimName: test-pvc2\n')),(0,o.kt)("h3",{id:"44-clone-operation"},"4.4 Clone Operation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: cloned-pvc\nspec:\n  storageClassName: hwameistor-storage-lvm-thin-hdd\n  dataSource:\n    name: test-pvc\n    kind: PersistentVolumeClaim\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 5Gi\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: cloned-pod\nspec:\n  containers:\n  - name: busybox\n    image: busybox:1.31.1\n    command:\n      - sleep\n      - "360000000"\n    imagePullPolicy: IfNotPresent\n    volumeMounts:\n    - name: temp-pvc\n      mountPath: /mnt/temp-fs\n  volumes:\n  - name: temp-pvc\n    persistentVolumeClaim:\n      claimName: cloned-pvc\n  terminationGracePeriodSeconds: 10\n')),(0,o.kt)("h2",{id:"5-monitoring-and-management"},"5. Monitoring and Management"),(0,o.kt)("h3",{id:"51-check-thin-pool-status"},"5.1 Check Thin Pool Status"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get localstoragenodes node-name -o yaml\n")),(0,o.kt)("p",null,"Key fields to monitor:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"status.pools.<pool-name>.thinPool"),": Contains thin pool details"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"status.pools.<pool-name>.thinPoolExtendRecords"),": Records thin pool extension history")),(0,o.kt)("h3",{id:"52-expand-thin-pool"},"5.2 Expand Thin Pool"),(0,o.kt)("p",null,"When thin pool usage approaches limit, create another ThinPoolClaim to expand. Both ",(0,o.kt)("inlineCode",{parentName:"p"},"spec.description.capacity")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"spec.description.poolMetadataSize")," can be increased, while ",(0,o.kt)("inlineCode",{parentName:"p"},"spec.description.overProvisionRatio")," can be adjusted as needed."),(0,o.kt)("h2",{id:"6-important-notes"},"6. Important Notes"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Over-provisioning Risk"),": While thin provisioning supports over-allocation, exceeding physical capacity causes serious issues. ",(0,o.kt)("strong",{parentName:"li"},"Closely monitor thin pool usage (dataPercent, metadataPercent in ",(0,o.kt)("inlineCode",{parentName:"strong"},"status.pools.<pool-name>.thinPool"),") to prevent full capacity situations")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Performance Impact"),": Thin volumes have some performance overhead - evaluate carefully for performance-sensitive applications"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Version Compatibility"),": Thin and thick volumes cannot be converted between each other"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Replica Limitation"),": Current version only supports single-replica thin volumes")),(0,o.kt)("h2",{id:"7-troubleshooting"},"7. Troubleshooting"),(0,o.kt)("p",null,"If thin pool nears full capacity:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Immediately stop creating new thin volumes"),(0,o.kt)("li",{parentName:"ol"},"Delete unnecessary snapshots and clones"),(0,o.kt)("li",{parentName:"ol"},"Expand thin pool capacity"),(0,o.kt)("li",{parentName:"ol"},"If already full, refer to ",(0,o.kt)("a",{parentName:"li",href:"https://man7.org/linux/man-pages/man7/lvmthin.7.html"},"LVM documentation")," for recovery")))}c.isMDXComponent=!0}}]);